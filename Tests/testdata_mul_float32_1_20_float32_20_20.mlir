"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<20x20xf32>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %3:2 = "func.call"() <{callee = @inputs}> : () -> (tensor<1x20xf32>, tensor<20x20xf32>)
    %4 = "func.call"() <{callee = @expected}> : () -> tensor<20x20xf32>
    %5 = "stablehlo.broadcast_in_dim"(%3#0) <{broadcast_dimensions = array<i64: 0, 1>}> : (tensor<1x20xf32>) -> tensor<20x20xf32>
    %6 = "stablehlo.multiply"(%5, %3#1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    "stablehlo.custom_call"(%6, %4) <{call_target_name = "check.expect_close", has_side_effect = true}> : (tensor<20x20xf32>, tensor<20x20xf32>) -> ()
    "func.return"(%6) : (tensor<20x20xf32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> (tensor<1x20xf32>, tensor<20x20xf32>), res_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<[[7.210290e-02, 1.62635362, -0.475408643, 2.24727774, -0.387222171, -1.94730842, -2.26543784, 1.14745438, 2.38171506, 0.776695967, 0.301315486, 0.346164763, 2.79359055, 3.06095266, 2.32065725, 7.43872642, 2.44612527, -2.22714376, 0.880327999, -4.15442657]]> : tensor<1x20xf32>}> : () -> tensor<1x20xf32>
    %2 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xf32>}> : () -> tensor<20x20xf32>
    "func.return"(%1, %2) : (tensor<1x20xf32>, tensor<20x20xf32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xf32>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0xC97E80BE9DD63FC09B2E66BEC369C3407A488ABF2E20E63FD9832FBE16293F40BDBA354084FD9DBE9246463FFA1A373EE18BD7C029A154414B399840017782C133B6803FC3DF6CC09B6FAF3F12F68541EDA8233DDEF9714096C0723F296F6DC1931800BF5568B04028E8BBC0953497C0DA757A40047710C04286943E522282BF9C5E8CC0FFC8D840D4659C4063E94840CCFFEFBFB91CD9BF54D434C0F1757D41D6D8A9BEF35F50C05FBE88BF711686402843483E3F1B97C08C10F3BF8642BEBF56310E40B56885C044CF3C3E1D14883FB3BD7A413FEE05BF535EFBBF4CA661415B1F13C0D20CBC3FAE02BABE9216F7C0B743183CEAA770C084779EBF914BF7407BE00B3E6C06F73F5488F83E81641C405C18F240029ED3BEDCBCB8BFD932033EDD67B0C08EB9E93F1D816EC1AD470742CE58844013F35EC0AD066FC036E0B0407EB5213E845C6240C7790940292534C15880E53F518A5E40816D74C0A44AD3BF911502C03E6A3EBFB780BB3E17F9C7BE92D726C173AEE7405AF699C09D1F5C41D750A3C0C264333F9E7F863F52FFF84039AF0B3E76E431BF434C7FBEB56A9EC1C11398BF514A0E404EC6AFC0BD57EB3FC037B440518B173FEE11573E6329A43EE7582641D8FAC2C04ADDCAC0BE3A3941BF6A0D41DC0FABC07CBF42BF7F653B41BB41633D7FA61AC0817CD63FF3906A403DD5A0BF302E46C0009ACF405DC740C076817F41DBDF30C02B45BEBE02ACE73F9B7F96C0CDBB7AC152BF91C0C376DDC168B38FC03974B9C003A9763D0B76883F497D973E3BB4A14079A5CB3EC83E74C077790A40575541C05A9F21C066231CC050341FC13C93A3BFB8F5873EFA54C43FFEC87341B8D70241595E7B3E58BD95C170FE8A410E73804171D9EDBFAFD017C1CFDB533D461AB540B98C163F9CD0B6C00D5F7BBE324FC9BE4E81BA40710D2D3FBE740AC143311A40A7BD90BF6854ECBDAF45D8404B61F94030720741078BE2405FA1424187380ABF392167C061D588C11F8CB1BDB8EEA6BFEC5D173F1357923E33935EBEC4F138C189178D402B5EB440608305C11C2D8EBF3AA062BE5584D43DCDE712C092EB8CC1526F44C0EBF2DEC1DD685C404F0C7340D0B7524008BAFDC042D14D3E0675D6C0E219B8BF79C94AC06C65DC3FAEDDFE401127FDC0E75707406A3058BDC2B5CF3F43E426BDEE006C3FD978A740965145C157593D406DD4E34072431140AA22F6C04CD81B4002894EC02BA2983DB24C1B41F6244CBEE77392C0B19F61BE0C73A3BF17800A4126142CBFACE07D40909ECE400E5A623E38F1B63FD6503841CABA13C1151836C0A2A1F740A263E14026F8D7C0CAB9A2BFD30AD9C085232B3EA4E481BF8824E4BF8F4F9B40D94BCABF04CA434028F91AC13281D5BF67F375C1AD1A1CBFCF320040BC53D13EE8444EC112F549C1632F26C017B4AAC1A3DA0BC09EA3CFC0659BEABFDEDD02C1B3830F3E7C0A274061528F3FCB7B753CABBC5CC0C217EE40C1DCF2C06D381CBEBFFD09C1EC60E0BF4D92BABFE292EFBFFFD060C15AF155C1478FF03EE2BD40418E474C41861E89402B2A0F40EFB4EFC08BF883BE35F66A402744083F3DAA1E4135B5913FBB2AB8C0C20084C1F6DC0FBEBB8052C112FCFFBE66946C3EEB500A40AD036B4171C22A418931B4C099B41AC2EE6A80C02800073FAEF464C0146F82C1149F643D4EF0DCBD5B84AF3B40E79240E02770BFC31F3E405207BE403189B4BFBE5668C00C78254067563EBF95479F3F0E17EEC0422327C1A2EC3AC00CB58D416E149CC05DB90C41CEDA4940BE100DC09018243E835C98403F432C40237B10C1C4BC7C3FDB7F254185A0D44075DFE1BF32F27EBFD7C7AA3E6E60893F2A7E9BBE3646EAC00EB903C0B6816EC14581BDC0132A51C10241843FA1B0503E598CD2408724923E61AD53C08D8709C0FD9C8F4025CFB33F61737C4182B2AFC07DA901417BF05F402AC725BFAC77A0BD8EC949BF49A3FF3FE56A694156A6A5C0E46B8941E0161AC1E4FDB4C0840F34C0D8A6FCC080F6A3BD31457ABE43C5163DEF04C63DAF07A6BF9C68A03F0E1C48BF1EE3633F2BEDBD41FD1947BF236F993D001EF2BF605D57C1F22F94C122C0C840ED2BA4C1DEC069404E7F4CBF705BA0C0FE02B54084130F3E08FA424072DFA7BF196AADC06014623FA45E43C021BD89C072D0EC3F5A850B40B63A8EBF2E6F6BBFBA8BD33E68854E40FF138DBF50B307C13EDC8F413D6B0A418B8A46C073602CBDFD0A7541"> : tensor<20x20xf32>}> : () -> tensor<20x20xf32>
    "func.return"(%0) : (tensor<20x20xf32>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

