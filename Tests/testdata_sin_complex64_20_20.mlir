"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<20x20xcomplex<f32>>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %2 = "func.call"() <{callee = @inputs}> : () -> tensor<20x20xcomplex<f32>>
    %3 = "func.call"() <{callee = @expected}> : () -> tensor<20x20xcomplex<f32>>
    %4 = "stablehlo.real"(%2) : (tensor<20x20xcomplex<f32>>) -> tensor<20x20xf32>
    %5 = "stablehlo.imag"(%2) : (tensor<20x20xcomplex<f32>>) -> tensor<20x20xf32>
    %6 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    %7 = "stablehlo.broadcast_in_dim"(%6) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<20x20xf32>
    %8 = "stablehlo.compare"(%4, %7) <{compare_type = #stablehlo<comparison_type FLOAT>, comparison_direction = #stablehlo<comparison_direction EQ>}> : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xi1>
    %9 = "stablehlo.sine"(%4) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    %10 = "stablehlo.cosine"(%4) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    %11 = "stablehlo.exponential_minus_one"(%5) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    %12 = "stablehlo.negate"(%5) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    %13 = "stablehlo.exponential_minus_one"(%12) : (tensor<20x20xf32>) -> tensor<20x20xf32>
    %14 = "stablehlo.subtract"(%11, %13) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %15 = "stablehlo.constant"() <{value = dense<2.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    %16 = "stablehlo.broadcast_in_dim"(%15) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<20x20xf32>
    %17 = "stablehlo.divide"(%14, %16) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %18 = "stablehlo.add"(%11, %13) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %19 = "stablehlo.constant"() <{value = dense<2.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    %20 = "stablehlo.broadcast_in_dim"(%19) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<20x20xf32>
    %21 = "stablehlo.add"(%18, %20) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %22 = "stablehlo.constant"() <{value = dense<2.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    %23 = "stablehlo.broadcast_in_dim"(%22) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<20x20xf32>
    %24 = "stablehlo.divide"(%21, %23) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %25 = "stablehlo.multiply"(%9, %24) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %26 = "stablehlo.multiply"(%10, %17) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    %27 = "stablehlo.constant"() <{value = dense<0.000000e+00> : tensor<f32>}> : () -> tensor<f32>
    %28 = "stablehlo.broadcast_in_dim"(%27) <{broadcast_dimensions = array<i64>}> : (tensor<f32>) -> tensor<20x20xf32>
    %29 = "stablehlo.complex"(%28, %26) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xcomplex<f32>>
    %30 = "stablehlo.complex"(%25, %26) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xcomplex<f32>>
    %31 = "stablehlo.select"(%8, %29, %30) : (tensor<20x20xi1>, tensor<20x20xcomplex<f32>>, tensor<20x20xcomplex<f32>>) -> tensor<20x20xcomplex<f32>>
    "stablehlo.custom_call"(%31, %3) <{call_target_name = "check.expect_almost_eq", has_side_effect = true}> : (tensor<20x20xcomplex<f32>>, tensor<20x20xcomplex<f32>>) -> ()
    "func.return"(%31) : (tensor<20x20xcomplex<f32>>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xcomplex<f32>>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xcomplex<f32>>}> : () -> tensor<20x20xcomplex<f32>>
    "func.return"(%1) : (tensor<20x20xcomplex<f32>>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xcomplex<f32>>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xcomplex<f32>>}> : () -> tensor<20x20xcomplex<f32>>
    "func.return"(%0) : (tensor<20x20xcomplex<f32>>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

