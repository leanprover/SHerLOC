"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<20x20xf32>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %3:2 = "func.call"() <{callee = @inputs}> : () -> (tensor<1x20xf32>, tensor<20x20xf32>)
    %4 = "func.call"() <{callee = @expected}> : () -> tensor<20x20xf32>
    %5 = "stablehlo.broadcast_in_dim"(%3#0) <{broadcast_dimensions = array<i64: 0, 1>}> : (tensor<1x20xf32>) -> tensor<20x20xf32>
    %6 = "stablehlo.add"(%5, %3#1) : (tensor<20x20xf32>, tensor<20x20xf32>) -> tensor<20x20xf32>
    "stablehlo.custom_call"(%6, %4) <{call_target_name = "check.expect_close", has_side_effect = true}> : (tensor<20x20xf32>, tensor<20x20xf32>) -> ()
    "func.return"(%6) : (tensor<20x20xf32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> (tensor<1x20xf32>, tensor<20x20xf32>), res_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<[[0.977869093, -2.95485735, -2.63425946, 3.37474132, 2.55621076, -6.3794117, 3.77089119, 1.04626977, 7.24682045, 4.20864725, 1.76182485, 0.182185054, 2.10681438, -4.07676077, 0.497429788, 1.08807075, -6.25094127, 1.93655813, 0.764749944, -0.524217248]]> : tensor<1x20xf32>}> : () -> tensor<1x20xf32>
    %2 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xf32>}> : () -> tensor<20x20xf32>
    "func.return"(%1, %2) : (tensor<1x20xf32>, tensor<20x20xf32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xf32>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0xF8B196409C8296C02D193EC0545DDC408D94DD3F0C83ECC0AAA9D13F013B104044303B4169D38A40751BD43F73B6EFBFB2ADE63FD47E4DC0094CD940A791C54055192EC1FE499D40CB194B4068DE5D40482EFEBF507FA8C0DA01A0C0FE11DF40DE4BD44014FABBBFD45ACC40806D23BC8784AF4034B3184072A2A640D02790BE63FB8BC00DB78E40BAB314C0DE4D5C405CD7D9C02A1A3CBF8724374076B6004006EFC23FC2689AC040A6963F6B3186409AE86D3FD285F2C06C6D7E406ABB54C0A436BD400A63DC402006ABBF3C91DABD12643740CCBC0740D2A562C030565B4026EA07C110FAAEBD7549CA4072AF38C07EE3AE40E46CD1C0A5102340D1049D402EA9CABF0072363C3EC29C3F031E81BF95C0C940BE59EE3FDAD1003FA23B3040E8DABE40448806BF8BA44440AEAD19C0920611C1B5AE874011B78EC0E4A758C015C332C04EFAA1BF1E464FC020D9A93E6A230340F86013C05C5DEABF8AA25340740083407E588A40E6E52840641CA9400814D1BE4C26D0C054D9FCBFC63C0A40C93470C096C1B640F48C57C0A8E809C0145B7BBE1CF56CC00228BE40701C1D3F64AC9FBFF13198C03A19C140AED379BFB48E2D410447C54030FF674026538EC0F07D0A40DC7CFBBFDCAF77BEE70F85BFEC751AC1641D0D40768AD7BFDCE873BE48AA82BDE203A3C000B05EBFC072A240D649D140FE45C9C032B50540C0C78AC02E6F024100869DBCE067414002BB12C0927C2440D0FBCCC06811844096E471BFF07166C09B8ED6BFEEA8ED3F356EA04013BD11C0CE6B8CBF0A2DB5C0C6C88F40A63DA53FE6F341C0F2F9EC40FAE4CAC0E2533D416A2E86409E458740D8A281C091F9DE3F88995BBF10702940F2DBA33EF02FD0C0FECC4EBFE6E42540A28803C0DA076C400C4156C0004E6F3DDA54AC40F6158C3F887AD3C038CC943E78841DC04D4D6740DCBAD64040D0D2BE30BC3DC0834D43404F87EDC0AB752040B252E8C058EB39C1B49B29407B8DF13E842B5B40E9FF814083DB57C08EA3FC3FC76F62406E1B9A3FE2BB2FC1A514F540B73FE0BF139A7841B3F027405E022F40B4175EC03CB58A3F76AA1CC1D6D793C074EE4D3FF7ABD4C0E595B0BFD0B4D23DDE5843C00CB02CBE22A9D4C0CE3690C036577C40248AE53F0482C3C0646B3840061D0A40BA149640A4089D40F2006B40672DB93F8857633E09A793C02AB49CBF34AE4E3F2AE10CC09456AF406B2818BF0C7032C0FC6AB0BFC5E2B6BFA1B138C0EA98AD40583CC6BE0111B3C09DCAB740D0B7E4BD266B0E401E2760409F2F5BC0F2BC7740C19583401646D7C090E0653FA58F95C0A4DE91BFACF80140497F0540A8757FBE8069973F6AFF94C0044844C08E9B04403788AE3F20D5B7C064C5643F4EA34FBFF7EBD240E132E04029B09B3FAA0904C010C2694026A019C157CF984007DE2440DC7D1CC1B64B613F28E20FBE192FD1BFFA18A8C01CDE003FF7A895C0C4BBEE4088E3273FD85BDD3F974385409D40D5C0DC19C44035871D405091E440C6E33240F009F23EA8601EBF57E1B3C0889747C07969C1C0D4A0CC3FA4696340CCBFB2BDC3FF4ABF1EBDF7C0CA31BFC0E7E06C4058F8CD405798BAC02C05D8BFD66661407E49AC407DEE9A4088233ABE6C2C30C07A280F40B8DB7AC0DA0299C0402A63C0240CEBBFEABC3540E042073EC249613F80C64C40A76244C0E64EB6C07C29103FB22D3C40C81C13C0F2B59A40DCBD5A3EF0878A4090D504BFF255CC4073B5C53F6F3D8B400849C93F06EF053FBA5D56C05C8C00C1330D9140F04DDA3DB45340404DF5524064AEA7C0745488C08BEA30405606F73FCE575FC073E5AB405C1660402E5DE24026046F40A716783F3747B4BF70B7344033800BC09BA737BF4872433E3122E1C0727B11BF8EA6F43F3005A8BDA1D0BB3F8045BCBEDC0CC9C0C8CB88400C4E9040743BACC016D33FC016E0E84047D8E2401275E140836D1641408ECB3D54E48ABFC0BF10C19BD957401E018E3F4075CDC0B3B2A2407CE319C0FABFF3C05EDAE940DD0E69C020BE38C094BB43BF302141BED16844C1C895EE40364355C0B2BE5240D047444036D26F40C317C140E3E84B403879F3BFFE234AC0BCFAD8BEBA74E1C0DCCD833E638655BF012CE4BF6EB298BE4F9F55C0628AD0C0ED7A4640703163BE78DE10C19EBF2D40566EBE3E2E05A6405E975C409C68C5BFE12E3A3F36126A4079C8A9C0A156884004B6374012BF07C1FE2B3CBF41A3234098C335C0"> : tensor<20x20xf32>}> : () -> tensor<20x20xf32>
    "func.return"(%0) : (tensor<20x20xf32>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

