"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<5x6x7xf64>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %3 = "stablehlo.constant"() <{value = dense<[[0, 1], [2, 3]]> : tensor<2x2xi64>}> : () -> tensor<2x2xi64>
    %4:2 = "func.call"() <{callee = @inputs}> : () -> (tensor<5x6x7xf64>, tensor<2x7xf64>)
    %5 = "func.call"() <{callee = @expected}> : () -> tensor<5x6x7xf64>
    %6 = "stablehlo.scatter"(%4#0, %3, %4#1) <{scatter_dimension_numbers = #stablehlo.scatter<update_window_dims = [1], inserted_window_dims = [0, 1], scatter_dims_to_operand_dims = [0, 1], index_vector_dim = 1>, unique_indices = true}> ({
    ^bb0(%arg0: tensor<f64>, %arg1: tensor<f64>):
      "stablehlo.return"(%arg1) : (tensor<f64>) -> ()
    }) : (tensor<5x6x7xf64>, tensor<2x2xi64>, tensor<2x7xf64>) -> tensor<5x6x7xf64>
    "stablehlo.custom_call"(%6, %5) <{call_target_name = "check.expect_close", has_side_effect = true}> : (tensor<5x6x7xf64>, tensor<5x6x7xf64>) -> ()
    "func.return"(%6) : (tensor<5x6x7xf64>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> (tensor<5x6x7xf64>, tensor<2x7xf64>), res_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<"0xtensor<5x6x7xf64>}> : () -> tensor<5x6x7xf64>
    %2 = "stablehlo.constant"() <{value = dense<[[4.549512527699056, 1.3010316926848646, 4.7500453990295846, -4.0913358139973512, -2.0583816592283313, -7.5194237242085453, 6.76179527031137], [2.4755319349688536, 1.6918172871885335, 0.67820074009095399, -4.2042061733111034, 0.29414501323414144, 5.0909436989880668, 5.2493655583529808]]> : tensor<2x7xf64>}> : () -> tensor<2x7xf64>
    "func.return"(%1, %2) : (tensor<5x6x7xf64>, tensor<2x7xf64>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<5x6x7xf64>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0x3EFC169F832A0C403E863282CAB80CC03E0D249A0C60024010FF3D1B8356D03F2E80FB222D321240C40E5B39CF731CC02A78EB83944D15C0C6D67C69B33212409A41B29B06D1F43FAC63ADE60B001340E549B822875D10C04093A8CD907700C00AF810D0E3131EC073F0300F140C1B4082C3A979F61FF6BF5127DCFBB0EA00C0C1584E05BCEBE3BFB857D6CC36A81740A8CFBF5C0B1F0740AE2FE2DE537403C0E8A6215C66A6FA3F46B045295641F9BF908CA8A415B6F6BFB279895786C9DD3F965C5B14827A0D403358C11CAD6AF53F22B720A33A3FE1BFA6C97AFEBEB513C07AD00450ACB70540096E88A24D7911C0C78667FBB701F3BFC03BCF10C197E9BF8E4D5D950DE2F3BFE4ADCFC5A721F43FF6045DA4AC2C09C08E3FD5E9627F0EC07C561B3A4E280440181A9C666790B0BF617F8953F360EBBF446F1B7389E507C05E0FD95E7586BBBF70D41FCBD57B21C05C56495761F9F83F8E32FE9AE7B9E6BF3470D6201A5A10C084DADEA27D2C0FC0BE6449FE3980B33FE0855EBEBDBFF33F74C9E89DB76FFE3FF52A8D695843F53F5273AAB7405814C081213849E60205C02EFD7805FA02F83FD4701FE1A48CE33F0AFAE884ABAF13C03097546A4A74F0BF3A1BC710154109C083F553C00C66F83FC60269BA25AEF93F47E42326B64BF13FE3B713F2A20401C05DAFEB445C8EDA3F12C81820EEEADABF8DAF4CD7EE7202C0A3E14C04F47F11C0396957D54177FA3FC040EDD8A26900406BEA7F0985D3D53F761451A5A3B103C0A79DBE2EF3B4E13FCE13A2F737DB154082E0CEA7C16DF13FB1A50BE41ED9FE3F1C0450177FF00240C60E8B08DD46DFBF2A4A8164D143F9BFAA88C8207B45F0BFC3C009D992D5CBBF3B263DB3A6E001C0540C6EFF0253FEBF48CDC9699AE115C0082A163675F6DD3F6F0153232B36134006CD5CBA6E00F2BF5CF4461B3E3F1740E5C27239980BE1BF7AC2CFE834FCF6BF32CFAEF03AE0104061147AD9B9AFA1BF81471F6847C801C0FE6E2AA6562917C04F0D7498475C02C0E41256795AFD03407F894920B808F73F1EC66A821AAA1F4050BAC19798F3B73F499BE43F28500740B8A2E4C0A53510401ED31551CDF70C4047077A44114E0340D5148514A19FBA3F94E3A2FA4C070340F0F0BEAD031E10C0D705D44C3DD207C0E830742E7BB903C09A28E7AFE3CD0340DB83F400AF11FB3F5E09DA09D2B3E53FCC0C506C1BD110C0E4D0079B45D3D23F5CB95358205D1440D47F57AF59FF14408837886D285CBEBF70505ECA1E0AFE3F2D945B159B471140C8E5CABC11A31140C4A38303880CFA3FBCA8FA57661423404CF47702DC6E00402797A252CF8CEDBF92EDE755B6ACFABF9ED342F8E98DCE3FAA6DF4A6DD05EF3F817BE47B0B70E3BFC966B11181A516C000DC9454250704C00F9498559C15CABF6C0C4B7F89CFE1BFD6A45325685AFFBF621B7D95A5AB08C072D7ADA6F101F6BFCF801A034F58FEBF75D2D1CD401101C0DE3EAE33862100C0D915C80E4F41F4BF263584E1C7DEEF3F4A5F42C1D5F0F3BF216A27657CDA15C0E88D42CDC510F33F306E1830BDFB05409FF73D24D43D00402B3D361B8B61F2BF041761BDCAE9F5BF22B18BF41F9CF5BF7B2A6E5640130BC0AC4B22FD9AEF1140B727F7A975E70CC085E880423B0CE4BF9595809F110BF2BF1E01712B0D3DF73F1EE42B76CA811040D3ED26C6185101403C4BBF3F366F573FED30A1A924E600C0D35753A676900340DB1445E590340AC0906BFF954D8D0240AE148E4AD3E4174058508937824BEFBF30C71665AD31F03FAC628CA81923F5BF4803C76AB272C3BFF1BC91717C101340DC18ACE2662B10C0559C73A29ADD20C0FD883937858EE2BF1A4DD74C41BF0CC092ED6CC5393E14403B934BDFAF6B15C08EB4911BDD5910C00A1C9D91927FE0BFB821112B17390040A2503DDA57B7EB3F3169DF70CEE0E4BF0F9B7CA18B26D93F8B7781D468A500C0ABEEF6C8DD55C0BF64B8C1670A51BC3F14F22B5061ED05C09B8624FED668F73F47438107CC84F43FE04EB34C9F62FCBFB9415FFA161AF03FAF2FC5F7102FB83F56ACB85E7A63D5BFD6C8208736BC13C0FE518612040A0C40F4609E947F920FC0F07492D364410AC0F4A41EBFE1810C40B678552CE0840D40EB0D713351EEF0BFF05BBE8A5F44FD3F100510E825E5E5BF601F86141CBE06406A2F86FA321E144007CB93938E33F0BFEBF42B74A6971440E25C97A7AE550440E004AB5534F70E40EEC9ED953BB704C058A35EF66870E0BF0C5E794313CF0940EE0AAC72400F2340F05F3BF99A4206401A0C61BED42918404A167AF213540F40690B8B041B77F83F247F5032922DFF3F485741CBE8ABCA3F"> : tensor<5x6x7xf64>}> : () -> tensor<5x6x7xf64>
    "func.return"(%0) : (tensor<5x6x7xf64>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

