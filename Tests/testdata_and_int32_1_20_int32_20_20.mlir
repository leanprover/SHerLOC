"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<20x20xi32>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %3:2 = "func.call"() <{callee = @inputs}> : () -> (tensor<1x20xi32>, tensor<20x20xi32>)
    %4 = "func.call"() <{callee = @expected}> : () -> tensor<20x20xi32>
    %5 = "stablehlo.broadcast_in_dim"(%3#0) <{broadcast_dimensions = array<i64: 0, 1>}> : (tensor<1x20xi32>) -> tensor<20x20xi32>
    %6 = "stablehlo.and"(%5, %3#1) : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi32>
    "stablehlo.custom_call"(%6, %4) <{call_target_name = "check.expect_eq", has_side_effect = true}> : (tensor<20x20xi32>, tensor<20x20xi32>) -> ()
    "func.return"(%6) : (tensor<20x20xi32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> (tensor<1x20xi32>, tensor<20x20xi32>), res_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<[[2, -2, 0, -2, 0, 5, -1, 3, 0, -1, 0, 4, -2, -1, -4, 4, 6, 1, 0, -1]]> : tensor<1x20xi32>}> : () -> tensor<1x20xi32>
    %2 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xi32>}> : () -> tensor<20x20xi32>
    "func.return"(%1, %2) : (tensor<1x20xi32>, tensor<20x20xi32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xi32>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xi32>}> : () -> tensor<20x20xi32>
    "func.return"(%0) : (tensor<20x20xi32>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

