module @jit_f attributes {mhlo.num_partitions = 1 : si32, mhlo.num_replicas = 1 : si32} {
  func.func public @main(%arg0: tensor<si32> {mhlo.layout_mode = "default"}, %arg1: tensor<si32> {mhlo.layout_mode = "default"}) -> (tensor<si32> {jax.result_info = "default", mhlo.layout_mode = "default"}) {
    %0 = stablehlo.multiply (%c, %arg0) : (tensor<si32>, tensor<si32>) -> ( tensor<si32> )
    %0 = stablehlo.multiply (%c, %arg0) : (tensor<f32>, token) -> ( tensor<si32> )
    %1 = stablehlo.add (%0, %arg1) : (tensor<si32>, tensor<si32>) -> ( tensor<si32> )
    %1 = stablehlo.add (%0, %arg1) : (tensor<si32>, tensor<si32>) -> ( tensor<si32> )
    %foo = stablehlo.constant () { value = dense <1> : tensor<si32> } : () -> ( tensor<si32> )
    %result = stablehlo.map (%input0, %input1) (
       { ^bb0(%arg0: tensor<si64>, %arg1: tensor<si64>):
           %0 = stablehlo.multiply (%arg0, %arg1) :  (tensor<si64>, tensor<si64>) -> ( tensor<si64> )
           stablehlo.return (%0) : (tensor<si64>) -> ()
       })
    : (tensor<si64>, tensor<si64>) -> (tensor<si64>)
    stablehlo.return(%0) : (tensor<i1>) -> ()
  }
}

