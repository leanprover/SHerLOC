"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<20x20xi32>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %3:2 = "func.call"() <{callee = @inputs}> : () -> (tensor<1x20xi32>, tensor<20x20xi32>)
    %4 = "func.call"() <{callee = @expected}> : () -> tensor<20x20xi32>
    %5 = "stablehlo.broadcast_in_dim"(%3#0) <{broadcast_dimensions = array<i64: 0, 1>}> : (tensor<1x20xi32>) -> tensor<20x20xi32>
    %6 = "stablehlo.shift_left"(%5, %3#1) : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi32>
    "stablehlo.custom_call"(%6, %4) <{call_target_name = "check.expect_eq", has_side_effect = true}> : (tensor<20x20xi32>, tensor<20x20xi32>) -> ()
    "func.return"(%6) : (tensor<20x20xi32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> (tensor<1x20xi32>, tensor<20x20xi32>), res_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<[[3, 4, -4, 3, 1, 1, 1, -1, 0, 3, 2, 1, 0, 0, 2, 0, 0, 2, -1, -2]]> : tensor<1x20xi32>}> : () -> tensor<1x20xi32>
    %2 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xi32>}> : () -> tensor<20x20xi32>
    "func.return"(%1, %2) : (tensor<1x20xi32>, tensor<20x20xi32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xi32>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0x0000000000000000F8FFFFFF06000000010000000100000001000000FFFFFFFF00000000000000000200000000000000000000000000000008000000000000000000000000000000FEFFFFFF0000000006000000040000000000000003000000000000000000000000000000000000000000000030000000020000000100000000000000000000000200000000000000000000000400000000000000FCFFFFFF000000000000000000000000000000000100000001000000000000000000000000000000300000000200000000000000000000000000000004000000000000000000000002000000F8FFFFFFFCFFFFFF0300000004000000F8FFFFFF00000000040000001000000002000000FFFFFFFF000000000C000000080000000000000000000000000000000000000000000000000000000000000000000000FEFFFFFF6000000010000000F0FFFFFF030000001000000020000000000000000000000000000000060000000400000000000000000000000000000002000000000000000000000004000000FFFFFFFF000000000300000000000000FCFFFFFF06000000000000008000000000000000FEFFFFFF00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000003000000400000000000000006000000080000000000000002000000FEFFFFFF00000000000000000200000001000000000000000000000000000000000000000000000020000000FEFFFFFFFEFFFFFF06000000000000000000000003000000000000000000000000000000FFFFFFFF00000000180000000400000000000000000000000000000080000000000000000000000002000000FFFFFFFFFEFFFFFF8001000000000000F8FFFFFF03000000010000000000000000000000FEFFFFFF000000000C0000000200000000000000000000000000000000000000000000000000000002000000000000000000000000000000040000000000000003000000020000000100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F8FFFFFF030000000000000000000000000000000400000001000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000004000000FFFFFFFFFCFFFFFF0300000008000000F8FFFFFF80010000010000000400000002000000FFFFFFFF000000000C000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000FCFFFFFF00000000040000000100000001000000000000000000000000000000020000000100000000000000000000000200000000000000000000000000000000000000FEFFFFFF0300000000000000F0FFFFFF0C000000020000000100000001000000FFFFFFFF000000000C0000000800000000000000000000000000000002000000000000000000000080000000E0FFFFFFFEFFFFFF0000000020000000F8FFFFFF000000000000000000000000080000000000000000000000000000000000000002000000000000000000000000000000000000000000000004000000FEFFFFFFFEFFFFFF0C00000010000000FCFFFFFF18000000000000000200000000000000F8FFFFFF00000000180000000000000001000000000000000000000040000000000000000000000020000000FCFFFFFFFCFFFFFF0300000000000000FCFFFFFF0C0000000000000004000000000000000000000000000000030000000200000001000000000000000000000000000000000000000000000002000000FEFFFFFFFCFFFFFF0600000004000000FCFFFFFF00000000000000000100000001000000E0FFFFFF00000000000000000000000010000000000000000000000008000000000000000000000020000000C0FFFFFFFEFFFFFF0300000008000000FCFFFFFF03000000000000000100000008000000FFFFFFFF00000000030000000000000000000000000000000000000010000000000000000000000020000000FFFFFFFFFCFFFFFF00000000200000000000000018000000000000000100000004000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000F0FFFFFF"> : tensor<20x20xi32>}> : () -> tensor<20x20xi32>
    "func.return"(%0) : (tensor<20x20xi32>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

