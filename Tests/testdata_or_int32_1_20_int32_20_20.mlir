"builtin.module"() <{sym_name = "jit_main"}> ({
  "func.func"() <{function_type = () -> tensor<20x20xi32>, res_attrs = [{jax.result_info = "", mhlo.layout_mode = "default"}], sym_name = "main", sym_visibility = "public"}> ({
    %3:2 = "func.call"() <{callee = @inputs}> : () -> (tensor<1x20xi32>, tensor<20x20xi32>)
    %4 = "func.call"() <{callee = @expected}> : () -> tensor<20x20xi32>
    %5 = "stablehlo.broadcast_in_dim"(%3#0) <{broadcast_dimensions = array<i64: 0, 1>}> : (tensor<1x20xi32>) -> tensor<20x20xi32>
    %6 = "stablehlo.or"(%5, %3#1) : (tensor<20x20xi32>, tensor<20x20xi32>) -> tensor<20x20xi32>
    "stablehlo.custom_call"(%6, %4) <{call_target_name = "check.expect_eq", has_side_effect = true}> : (tensor<20x20xi32>, tensor<20x20xi32>) -> ()
    "func.return"(%6) : (tensor<20x20xi32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> (tensor<1x20xi32>, tensor<20x20xi32>), res_attrs = [{mhlo.layout_mode = "default"}, {mhlo.layout_mode = "default"}], sym_name = "inputs", sym_visibility = "private"}> ({
    %1 = "stablehlo.constant"() <{value = dense<[[-2, -2, -1, 3, 0, -2, 0, 0, 0, -2, 2, 0, 3, 1, 0, -1, -3, 3, -4, 0]]> : tensor<1x20xi32>}> : () -> tensor<1x20xi32>
    %2 = "stablehlo.constant"() <{value = dense<"0xtensor<20x20xi32>}> : () -> tensor<20x20xi32>
    "func.return"(%1, %2) : (tensor<1x20xi32>, tensor<20x20xi32>) -> ()
  }) : () -> ()
  "func.func"() <{function_type = () -> tensor<20x20xi32>, res_attrs = [{mhlo.layout_mode = "default"}], sym_name = "expected", sym_visibility = "private"}> ({
    %0 = "stablehlo.constant"() <{value = dense<"0xFEFFFFFFFEFFFFFFFFFFFFFF0300000003000000FEFFFFFF000000000100000000000000FEFFFFFF0200000000000000FBFFFFFF0100000000000000FFFFFFFFFFFFFFFF03000000FEFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FEFFFFFF03000000FFFFFFFF00000000FEFFFFFFFFFFFFFF0100000003000000FBFFFFFF03000000FFFFFFFFFDFFFFFFFFFFFFFFFEFFFFFF02000000FEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF03000000FDFFFFFFFEFFFFFF020000000000000003000000FFFFFFFF03000000FFFFFFFFFDFFFFFFFFFFFFFFFEFFFFFFFEFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF03000000FCFFFFFFFEFFFFFF0000000000000000FBFFFFFFFFFFFFFFFEFFFFFF00000000FFFFFFFF01000000FFFFFFFFFFFFFFFFFFFFFFFF03000000FCFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF03000000FFFFFFFFFEFFFFFF02000000FEFFFFFFFEFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF03000000FDFFFFFF02000000FFFFFFFFFFFFFFFF03000000FFFFFFFF01000000FEFFFFFFFEFFFFFFFFFFFFFF0700000000000000FFFFFFFF000000000200000001000000FFFFFFFF0300000003000000030000000500000007000000FFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0300000000000000FFFFFFFF00000000FAFFFFFF01000000FFFFFFFFFFFFFFFF02000000FFFFFFFF01000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF03000000FFFFFFFFFEFFFFFFFDFFFFFF0000000000000000FEFFFFFF02000000020000000300000005000000FAFFFFFFFFFFFFFFFDFFFFFF07000000FCFFFFFF02000000FFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF00000000FEFFFFFFFEFFFFFF0200000000000000FFFFFFFF02000000FEFFFFFF07000000FFFFFFFF01000000FFFFFFFFFDFFFFFF03000000FEFFFFFFFDFFFFFFFEFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF00000000FEFFFFFF000000000000000002000000FFFFFFFF0200000001000000FFFFFFFF0100000000000000FFFFFFFFFDFFFFFF07000000FFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF0700000000000000FEFFFFFF030000000300000002000000FFFFFFFF02000000FFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFDFFFFFF01000000FFFFFFFFFEFFFFFFFFFFFFFF03000000FFFFFFFFFFFFFFFF00000000FFFFFFFF00000000FEFFFFFFFBFFFFFFFCFFFFFFFFFFFFFF09000000FDFFFFFFFFFFFFFFFDFFFFFF03000000FCFFFFFF05000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF070000000000000003000000FEFFFFFF02000000000000000300000003000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFF00000000FEFFFFFFFFFFFFFFFFFFFFFF0300000002000000FEFFFFFF020000000000000000000000FEFFFFFFFFFFFFFF01000000030000000100000000000000FFFFFFFFFFFFFFFF03000000FEFFFFFFFDFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF0300000001000000FFFFFFFF0000000001000000FBFFFFFFFFFFFFFF0300000006000000FFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF03000000FCFFFFFF04000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02000000FEFFFFFFFCFFFFFF0000000000000000FEFFFFFF03000000FDFFFFFFFFFFFFFF0100000003000000FFFFFFFFFDFFFFFF03000000FCFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFF01000000FFFFFFFF0200000000000000FDFFFFFFFEFFFFFF0700000003000000030000000100000001000000FFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFF07000000FEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01000000FFFFFFFF0200000001000000FEFFFFFFFEFFFFFFFAFFFFFF05000000FFFFFFFF0700000000000000FFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFF00000000FEFFFFFFFEFFFFFFFFFFFFFFFFFFFFFF02000000FFFFFFFF00000000FEFFFFFF00000000FEFFFFFF03000000FEFFFFFF03000000FFFFFFFF00000000FFFFFFFFFFFFFFFF03000000FDFFFFFF00000000FFFFFFFFFEFFFFFFFFFFFFFF03000000FDFFFFFFFFFFFFFF0000000000000000FFFFFFFFFEFFFFFFFEFFFFFFFFFFFFFF030000000100000001000000FFFFFFFFFFFFFFFFFFFFFFFFFCFFFFFF00000000"> : tensor<20x20xi32>}> : () -> tensor<20x20xi32>
    "func.return"(%0) : (tensor<20x20xi32>) -> ()
  }) : () -> ()
}) {mhlo.num_partitions = 1 : i32, mhlo.num_replicas = 1 : i32} : () -> ()

