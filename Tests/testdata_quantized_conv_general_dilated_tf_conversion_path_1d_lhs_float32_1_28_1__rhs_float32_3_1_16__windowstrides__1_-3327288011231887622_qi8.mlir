"builtin.module"() ({
  "func.func"() <{function_type = () -> tensor<i1>, sym_name = "main"}> ({
    %0 = "stablehlo.constant"() <{value = dense<[[[-0.467909843], [3.0104866], [1.79241717], [-2.66431046], [0.943148195], [0.417969763], [-3.74905968], [3.16968536], [-5.34840393], [0.546826541], [-2.03253365], [0.221049443], [-1.28537452], [-3.92773461], [-3.46224833], [-6.31273508], [-1.36294055], [-0.348805457], [-1.48003304], [-2.109411], [2.18338346], [2.66028404], [-2.67348027], [-4.70081472], [2.17808843], [-4.80057335], [-0.520323932], [-3.46543169]]]> : tensor<1x28x1xf32>}> : () -> tensor<1x28x1xf32>
    %1 = "stablehlo.constant"() <{value = dense<[[[1.86612034, -2.69200087, 3.64211726, -0.905698835, -0.781734287, 3.59102416, 1.76857328, -0.165421158, 3.81084895, 2.13960075, 1.54851282, 1.18953419, 2.73690462, 1.39771187, 0.182823494, -2.9513216]], [[4.55942965, -3.55209756, 1.15906274, 1.3861196, -2.87826657, -5.87348413, 2.54662919, 4.35670042, 6.92599821, -3.36722088, 0.160179541, 2.87391615, 0.706002235, 0.168740258, -0.562571108, 0.90919727]], [[1.72864258, 0.410824031, 1.69746757, 3.05829334, -1.61078143, -3.05013394, -1.17601025, -0.797711431, -5.79306793, -4.6189518, -1.4868108, 1.63480639, 2.47044754, 0.880895197, -0.240365773, 1.13968313]]]> : tensor<3x1x16xf32>}> : () -> tensor<3x1x16xf32>
    %2 = "stablehlo.constant"() <{value = dense<"0xtensor<1x28x16xf32>}> : () -> tensor<1x28x16xf32>
    %3 = "stablehlo.uniform_quantize"(%1) : (tensor<3x1x16xf32>) -> tensor<3x1x16x!quant.uniform<i8:f32, 0.0039215482917486456:-128>>
    %4 = "stablehlo.uniform_quantize"(%0) : (tensor<1x28x1xf32>) -> tensor<1x28x1x!quant.uniform<i8:f32, 0.0039188104517319626:-128>>
    %5 = "stablehlo.convolution"(%4, %3) <{batch_group_count = 1 : i64, dimension_numbers = #stablehlo.conv<[b, 0, f]x[0, i, o]->[b, 0, f]>, feature_group_count = 1 : i64, padding = dense<1> : tensor<1x2xi64>}> : (tensor<1x28x1x!quant.uniform<i8:f32, 0.0039188104517319626:-128>>, tensor<3x1x16x!quant.uniform<i8:f32, 0.0039215482917486456:-128>>) -> tensor<1x28x16x!quant.uniform<i32:f32, 1.5367804432676217E-5>>
    %6 = "stablehlo.uniform_quantize"(%5) : (tensor<1x28x16x!quant.uniform<i32:f32, 1.5367804432676217E-5>>) -> tensor<1x28x16x!quant.uniform<i8:f32, 0.0099521412568933827:-128>>
    %7 = "stablehlo.uniform_dequantize"(%6) : (tensor<1x28x16x!quant.uniform<i8:f32, 0.0099521412568933827:-128>>) -> tensor<1x28x16xf32>
    %8 = "stablehlo.custom_call"(%2, %7) <{call_target_name = "check.eq"}> : (tensor<1x28x16xf32>, tensor<1x28x16xf32>) -> tensor<i1>
    "func.return"(%8) : (tensor<i1>) -> ()
  }) : () -> ()
}) {jax.uses_shape_polymorphism = true} : () -> ()

